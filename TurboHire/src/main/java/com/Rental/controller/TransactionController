package com.Rental.controller;

import com.Rental.model.Car;
import com.Rental.model.CarBooking;
import com.Rental.model.Customer;
import com.Rental.model.Transaction;
import com.Rental.repository.TransactionRepository;
import com.Rental.service.CarBookingService;
import com.Rental.service.CarService;
import com.Rental.service.CustomerService;
import com.Rental.service.TransactionService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/transactions")
public class TransactionController {

    @Autowired
    private TransactionService transactionService;
    
    @Autowired
    private CarBookingService carBookingService;
    
    @Autowired
    private CarService carService;
    
    @Autowired
    private CustomerService customerService;

    @GetMapping("/makePayment/{bookingId}")
    public ResponseEntity<?> getPaymentDetails(@PathVariable String bookingId) {
        Optional<CarBooking> carBookingOpt = carBookingService.findById(bookingId);
        if (carBookingOpt.isEmpty()) {
            return ResponseEntity.badRequest().body("Booking not found");
        }

        CarBooking carBooking = carBookingOpt.get();
        Transaction transaction = new Transaction();
        transaction.setTransactionId(transactionService.generateTransactionId());
        transaction.setBookingId(bookingId);

        return ResponseEntity.ok().body(new PaymentResponse(transaction, carBooking.getTotalPayment(), carBooking.getPendingPayment()));
    }

    @PostMapping("/makePayment")
    public ResponseEntity<?> makePayment(@RequestBody Transaction transaction) {
        transaction.setApproved(null);
        transactionService.save(transaction);
        return ResponseEntity.ok().body("Payment recorded successfully");
    }

    @PutMapping("/updatePaymentStatus/{txnId}/{status}")
    public ResponseEntity<?> updatePaymentStatus(@PathVariable String txnId, @PathVariable String status) {
        Optional<Transaction> transactionOpt = transactionService.findById(txnId);
        if (transactionOpt.isEmpty()) {
            return ResponseEntity.badRequest().body("Transaction not found");
        }

        Transaction transaction = transactionOpt.get();
        transaction.setApproved(status.equalsIgnoreCase("approve"));
        transactionService.save(transaction);

        if (status.equalsIgnoreCase("approve")) {
            Optional<CarBooking> carBookingOpt = carBookingService.findById(transaction.getBookingId());
            if (carBookingOpt.isPresent()) {
                CarBooking carBooking = carBookingOpt.get();
                carBooking.setPendingPayment(carBooking.getPendingPayment() - transaction.getAmount());

                if (carBooking.getAdvancePayment() == 0.0) {
                    carBooking.setAdvancePayment(transaction.getAmount());
                    carService.updateCarStatus(carBooking.getCarNumber(), false);
                    customerService.updateCustomerStatus(carBooking.getUsername(), false);
                }

                carBooking.setStatus("CNF");
                carBookingService.save(carBooking);
            }
        }

        return ResponseEntity.ok().body("Payment status updated successfully");
    }

    @GetMapping("/bookingPayments")
    public ResponseEntity<List<Transaction>> getAllBookingPayments() {
        return ResponseEntity.ok(transactionService.findAll());
    }

    @PutMapping("/returnBooking/{bookingId}")
    public ResponseEntity<?> returnBooking(@PathVariable String bookingId) {
        Optional<CarBooking> carBookingOpt = carBookingService.findById(bookingId);
        if (carBookingOpt.isEmpty()) {
            return ResponseEntity.badRequest().body("Booking not found");
        }

        CarBooking carBooking = carBookingOpt.get();
        carBooking.setStatus("R");

        carService.updateCarStatus(carBooking.getCarNumber(), true);
        customerService.updateCustomerStatus(carBooking.getUsername(), true);

        carBookingService.save(carBooking);

        return ResponseEntity.ok().body("Booking returned successfully");
    }

    @PutMapping("/cancelBooking/{bookingId}")
    public ResponseEntity<?> cancelBooking(@PathVariable String bookingId) {
        Optional<CarBooking> carBookingOpt = carBookingService.findById(bookingId);
        if (carBookingOpt.isEmpty()) {
            return ResponseEntity.badRequest().body("Booking not found");
        }

        CarBooking carBooking = carBookingOpt.get();
        carBooking.setStatus("C");
        carBookingService.save(carBooking);

        carService.updateCarStatus(carBooking.getCarNumber(), true);
        customerService.updateCustomerStatus(carBooking.getUsername(), true);

        return ResponseEntity.ok().body("Booking canceled successfully");
    }

    private static class PaymentResponse {
        public Transaction transaction;
        public Double totalPayment;
        public Double pendingPayment;

        public PaymentResponse(Transaction transaction, Double totalPayment, Double pendingPayment) {
            this.transaction = transaction;
            this.totalPayment = totalPayment;
            this.pendingPayment = pendingPayment;
        }
    }
}
